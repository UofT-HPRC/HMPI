-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity md is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_out_V_din : OUT STD_LOGIC_VECTOR (120 downto 0);
    stream_out_V_full_n : IN STD_LOGIC;
    stream_out_V_write : OUT STD_LOGIC;
    stream_in_V_dout : IN STD_LOGIC_VECTOR (120 downto 0);
    stream_in_V_empty_n : IN STD_LOGIC;
    stream_in_V_read : OUT STD_LOGIC );
end;


architecture behav of md is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "md,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.008000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=129,HLS_SYN_FF=21816,HLS_SYN_LUT=28641}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_doMD_fu_142_ap_start : STD_LOGIC;
    signal grp_doMD_fu_142_ap_done : STD_LOGIC;
    signal grp_doMD_fu_142_ap_idle : STD_LOGIC;
    signal grp_doMD_fu_142_ap_ready : STD_LOGIC;
    signal grp_doMD_fu_142_stream_out_V_din : STD_LOGIC_VECTOR (120 downto 0);
    signal grp_doMD_fu_142_stream_out_V_write : STD_LOGIC;
    signal grp_doMD_fu_142_stream_in_V_read : STD_LOGIC;
    signal ap_reg_grp_doMD_fu_142_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component doMD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_out_V_din : OUT STD_LOGIC_VECTOR (120 downto 0);
        stream_out_V_full_n : IN STD_LOGIC;
        stream_out_V_write : OUT STD_LOGIC;
        stream_in_V_dout : IN STD_LOGIC_VECTOR (120 downto 0);
        stream_in_V_empty_n : IN STD_LOGIC;
        stream_in_V_read : OUT STD_LOGIC );
    end component;



begin
    grp_doMD_fu_142 : component doMD
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_doMD_fu_142_ap_start,
        ap_done => grp_doMD_fu_142_ap_done,
        ap_idle => grp_doMD_fu_142_ap_idle,
        ap_ready => grp_doMD_fu_142_ap_ready,
        stream_out_V_din => grp_doMD_fu_142_stream_out_V_din,
        stream_out_V_full_n => stream_out_V_full_n,
        stream_out_V_write => grp_doMD_fu_142_stream_out_V_write,
        stream_in_V_dout => stream_in_V_dout,
        stream_in_V_empty_n => stream_in_V_empty_n,
        stream_in_V_read => grp_doMD_fu_142_stream_in_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_doMD_fu_142_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_doMD_fu_142_ap_start <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_grp_doMD_fu_142_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_doMD_fu_142_ap_ready)) then 
                    ap_reg_grp_doMD_fu_142_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_doMD_fu_142_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_logic_0 = grp_doMD_fu_142_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);

    ap_done_assign_proc : process(grp_doMD_fu_142_ap_done, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_logic_0 = grp_doMD_fu_142_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_doMD_fu_142_ap_done, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_logic_0 = grp_doMD_fu_142_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_doMD_fu_142_ap_start <= ap_reg_grp_doMD_fu_142_ap_start;

    stream_in_V_read_assign_proc : process(grp_doMD_fu_142_stream_in_V_read, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            stream_in_V_read <= grp_doMD_fu_142_stream_in_V_read;
        else 
            stream_in_V_read <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_din <= grp_doMD_fu_142_stream_out_V_din;

    stream_out_V_write_assign_proc : process(grp_doMD_fu_142_stream_out_V_write, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            stream_out_V_write <= grp_doMD_fu_142_stream_out_V_write;
        else 
            stream_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
