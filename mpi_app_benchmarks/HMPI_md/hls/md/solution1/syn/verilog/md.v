// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="md,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.008000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=129,HLS_SYN_FF=21816,HLS_SYN_LUT=28641}" *)

module md (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_out_V_din,
        stream_out_V_full_n,
        stream_out_V_write,
        stream_in_V_dout,
        stream_in_V_empty_n,
        stream_in_V_read
);

parameter    ap_ST_fsm_state1 = 2'b1;
parameter    ap_ST_fsm_state2 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [120:0] stream_out_V_din;
input   stream_out_V_full_n;
output   stream_out_V_write;
input  [120:0] stream_in_V_dout;
input   stream_in_V_empty_n;
output   stream_in_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_out_V_write;
reg stream_in_V_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire    grp_doMD_fu_142_ap_start;
wire    grp_doMD_fu_142_ap_done;
wire    grp_doMD_fu_142_ap_idle;
wire    grp_doMD_fu_142_ap_ready;
wire   [120:0] grp_doMD_fu_142_stream_out_V_din;
wire    grp_doMD_fu_142_stream_out_V_write;
wire    grp_doMD_fu_142_stream_in_V_read;
reg    ap_reg_grp_doMD_fu_142_ap_start;
wire   [0:0] ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
#0 ap_reg_grp_doMD_fu_142_ap_start = 1'b0;
end

doMD grp_doMD_fu_142(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_doMD_fu_142_ap_start),
    .ap_done(grp_doMD_fu_142_ap_done),
    .ap_idle(grp_doMD_fu_142_ap_idle),
    .ap_ready(grp_doMD_fu_142_ap_ready),
    .stream_out_V_din(grp_doMD_fu_142_stream_out_V_din),
    .stream_out_V_full_n(stream_out_V_full_n),
    .stream_out_V_write(grp_doMD_fu_142_stream_out_V_write),
    .stream_in_V_dout(stream_in_V_dout),
    .stream_in_V_empty_n(stream_in_V_empty_n),
    .stream_in_V_read(grp_doMD_fu_142_stream_in_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_doMD_fu_142_ap_start <= 1'b0;
    end else begin
        if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_reg_grp_doMD_fu_142_ap_start <= 1'b1;
        end else if ((1'b1 == grp_doMD_fu_142_ap_ready)) begin
            ap_reg_grp_doMD_fu_142_ap_start <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == grp_doMD_fu_142_ap_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == grp_doMD_fu_142_ap_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        stream_in_V_read = grp_doMD_fu_142_stream_in_V_read;
    end else begin
        stream_in_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        stream_out_V_write = grp_doMD_fu_142_stream_out_V_write;
    end else begin
        stream_out_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == grp_doMD_fu_142_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign grp_doMD_fu_142_ap_start = ap_reg_grp_doMD_fu_142_ap_start;

assign stream_out_V_din = grp_doMD_fu_142_stream_out_V_din;

endmodule //md
