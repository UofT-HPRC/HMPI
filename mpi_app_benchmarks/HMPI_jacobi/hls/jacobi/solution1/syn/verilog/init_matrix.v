// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module init_matrix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        matrix_address0,
        matrix_ce0,
        matrix_we0,
        matrix_d0,
        rank
);

parameter    ap_ST_fsm_state1 = 103'd1;
parameter    ap_ST_fsm_state2 = 103'd2;
parameter    ap_ST_fsm_state3 = 103'd4;
parameter    ap_ST_fsm_state4 = 103'd8;
parameter    ap_ST_fsm_state5 = 103'd16;
parameter    ap_ST_fsm_state6 = 103'd32;
parameter    ap_ST_fsm_state7 = 103'd64;
parameter    ap_ST_fsm_state8 = 103'd128;
parameter    ap_ST_fsm_state9 = 103'd256;
parameter    ap_ST_fsm_state10 = 103'd512;
parameter    ap_ST_fsm_state11 = 103'd1024;
parameter    ap_ST_fsm_state12 = 103'd2048;
parameter    ap_ST_fsm_state13 = 103'd4096;
parameter    ap_ST_fsm_state14 = 103'd8192;
parameter    ap_ST_fsm_state15 = 103'd16384;
parameter    ap_ST_fsm_state16 = 103'd32768;
parameter    ap_ST_fsm_state17 = 103'd65536;
parameter    ap_ST_fsm_state18 = 103'd131072;
parameter    ap_ST_fsm_state19 = 103'd262144;
parameter    ap_ST_fsm_state20 = 103'd524288;
parameter    ap_ST_fsm_state21 = 103'd1048576;
parameter    ap_ST_fsm_state22 = 103'd2097152;
parameter    ap_ST_fsm_state23 = 103'd4194304;
parameter    ap_ST_fsm_state24 = 103'd8388608;
parameter    ap_ST_fsm_state25 = 103'd16777216;
parameter    ap_ST_fsm_state26 = 103'd33554432;
parameter    ap_ST_fsm_state27 = 103'd67108864;
parameter    ap_ST_fsm_state28 = 103'd134217728;
parameter    ap_ST_fsm_state29 = 103'd268435456;
parameter    ap_ST_fsm_state30 = 103'd536870912;
parameter    ap_ST_fsm_state31 = 103'd1073741824;
parameter    ap_ST_fsm_state32 = 103'd2147483648;
parameter    ap_ST_fsm_state33 = 103'd4294967296;
parameter    ap_ST_fsm_state34 = 103'd8589934592;
parameter    ap_ST_fsm_state35 = 103'd17179869184;
parameter    ap_ST_fsm_state36 = 103'd34359738368;
parameter    ap_ST_fsm_state37 = 103'd68719476736;
parameter    ap_ST_fsm_state38 = 103'd137438953472;
parameter    ap_ST_fsm_state39 = 103'd274877906944;
parameter    ap_ST_fsm_state40 = 103'd549755813888;
parameter    ap_ST_fsm_state41 = 103'd1099511627776;
parameter    ap_ST_fsm_state42 = 103'd2199023255552;
parameter    ap_ST_fsm_state43 = 103'd4398046511104;
parameter    ap_ST_fsm_state44 = 103'd8796093022208;
parameter    ap_ST_fsm_state45 = 103'd17592186044416;
parameter    ap_ST_fsm_state46 = 103'd35184372088832;
parameter    ap_ST_fsm_state47 = 103'd70368744177664;
parameter    ap_ST_fsm_state48 = 103'd140737488355328;
parameter    ap_ST_fsm_state49 = 103'd281474976710656;
parameter    ap_ST_fsm_state50 = 103'd562949953421312;
parameter    ap_ST_fsm_state51 = 103'd1125899906842624;
parameter    ap_ST_fsm_state52 = 103'd2251799813685248;
parameter    ap_ST_fsm_state53 = 103'd4503599627370496;
parameter    ap_ST_fsm_state54 = 103'd9007199254740992;
parameter    ap_ST_fsm_state55 = 103'd18014398509481984;
parameter    ap_ST_fsm_state56 = 103'd36028797018963968;
parameter    ap_ST_fsm_state57 = 103'd72057594037927936;
parameter    ap_ST_fsm_state58 = 103'd144115188075855872;
parameter    ap_ST_fsm_state59 = 103'd288230376151711744;
parameter    ap_ST_fsm_state60 = 103'd576460752303423488;
parameter    ap_ST_fsm_state61 = 103'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 103'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 103'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 103'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 103'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 103'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 103'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 103'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 103'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 103'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 103'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 103'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 103'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 103'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 103'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 103'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 103'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 103'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 103'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 103'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 103'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 103'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 103'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 103'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 103'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 103'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 103'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 103'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 103'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 103'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 103'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 103'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 103'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 103'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 103'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 103'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 103'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 103'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 103'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 103'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 103'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 103'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 103'd5070602400912917605986812821504;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] matrix_address0;
output   matrix_ce0;
output   matrix_we0;
output  [31:0] matrix_d0;
input  [0:0] rank;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg matrix_ce0;
reg matrix_we0;

(* fsm_encoding = "none" *) reg   [102:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_142_p2;
reg   [63:0] reg_156;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state94;
wire   [31:0] grp_fu_126_p1;
reg   [31:0] reg_163;
wire    ap_CS_fsm_state31;
wire   [0:0] exitcond1_fu_193_p2;
wire    ap_CS_fsm_state95;
wire   [31:0] grp_fu_118_p2;
reg   [31:0] reg_170;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state61;
wire   [63:0] grp_fu_130_p1;
reg   [63:0] reg_177;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state62;
wire   [63:0] grp_fu_151_p2;
reg   [63:0] reg_183;
wire   [63:0] grp_fu_148_p1;
reg   [63:0] tmp_reg_295;
wire    ap_CS_fsm_state6;
wire   [63:0] grp_fu_136_p2;
wire    ap_CS_fsm_state30;
wire   [31:0] tmp_34_i_fu_209_p1;
wire    ap_CS_fsm_state32;
wire   [6:0] tmp_43_fu_238_p2;
reg   [6:0] tmp_43_reg_313;
wire    ap_CS_fsm_state36;
reg   [63:0] tmp_31_i_reg_318;
wire   [63:0] tmp_36_i_fu_133_p1;
reg   [63:0] tmp_36_i_reg_324;
wire   [3:0] j_8_fu_250_p2;
reg   [3:0] j_8_reg_332;
wire    ap_CS_fsm_state37;
wire   [31:0] tmp_26_i_fu_266_p1;
wire   [0:0] exitcond_fu_244_p2;
wire   [6:0] tmp_44_fu_275_p2;
reg   [6:0] tmp_44_reg_342;
wire   [2:0] i_8_fu_280_p2;
reg   [2:0] i_8_reg_347;
wire   [31:0] grp_fu_112_p2;
reg   [31:0] x_reg_352;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state103;
reg   [63:0] y_0_in_reg_68;
reg   [2:0] i_reg_77;
wire   [31:0] x_assign_phi_fu_93_p4;
reg   [31:0] x_assign_reg_89;
wire    ap_CS_fsm_state96;
reg   [3:0] j_reg_101;
wire   [63:0] tmp_51_cast_fu_286_p1;
wire    ap_CS_fsm_state58;
reg   [31:0] grp_fu_118_p0;
reg   [31:0] grp_fu_118_p1;
wire    ap_CS_fsm_state54;
reg   [63:0] grp_fu_126_p0;
reg   [31:0] grp_fu_130_p0;
reg   [63:0] grp_fu_136_p0;
reg   [63:0] grp_fu_136_p1;
wire    ap_CS_fsm_state23;
reg   [63:0] grp_fu_142_p0;
reg   [63:0] grp_fu_142_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state87;
wire   [31:0] grp_fu_148_p0;
reg   [63:0] grp_fu_151_p1;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state66;
wire   [31:0] tmp_36_to_int_i_fu_199_p1;
wire   [31:0] tmp_36_neg_i_fu_203_p2;
wire   [5:0] tmp_41_fu_214_p3;
wire   [3:0] tmp_42_fu_226_p3;
wire   [6:0] p_shl1_cast_fu_234_p1;
wire   [6:0] p_shl_cast_fu_222_p1;
wire   [31:0] tmp_28_to_int_i_fu_256_p1;
wire   [31:0] tmp_28_neg_i_fu_260_p2;
wire   [6:0] tmp_28_cast_fu_271_p1;
reg   [102:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 103'd1;
end

jacobi_fadd_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
jacobi_fadd_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_assign_reg_89),
    .din1(32'd1065353216),
    .ce(1'b1),
    .dout(grp_fu_112_p2)
);

jacobi_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
jacobi_fmul_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_118_p0),
    .din1(grp_fu_118_p1),
    .ce(1'b1),
    .dout(grp_fu_118_p2)
);

jacobi_fptrunc_64dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
jacobi_fptrunc_64dEe_U3(
    .din0(grp_fu_126_p0),
    .dout(grp_fu_126_p1)
);

jacobi_fpext_32nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_fpext_32nseOg_U4(
    .din0(grp_fu_130_p0),
    .dout(grp_fu_130_p1)
);

jacobi_fpext_32nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_fpext_32nseOg_U5(
    .din0(reg_170),
    .dout(tmp_36_i_fu_133_p1)
);

jacobi_dadd_64ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_dadd_64ns_fYi_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_136_p0),
    .din1(grp_fu_136_p1),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

jacobi_dmul_64ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_dmul_64ns_g8j_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_142_p0),
    .din1(grp_fu_142_p1),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

jacobi_sitodp_32nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
jacobi_sitodp_32nhbi_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_148_p0),
    .ce(1'b1),
    .dout(grp_fu_148_p1)
);

jacobi_dexp_64ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
jacobi_dexp_64ns_ibs_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(grp_fu_151_p1),
    .ce(1'b1),
    .dout(grp_fu_151_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        i_reg_77 <= i_8_reg_347;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        i_reg_77 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        j_reg_101 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        j_reg_101 <= j_8_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        x_assign_reg_89 <= 32'd3231711232;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        x_assign_reg_89 <= x_reg_352;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (exitcond_fu_244_p2 == 1'd1))) begin
        i_8_reg_347 <= i_8_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        j_8_reg_332 <= j_8_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state94))) begin
        reg_156 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state31) & (exitcond1_fu_193_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state95))) begin
        reg_163 <= grp_fu_126_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state61))) begin
        reg_170 <= grp_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state62))) begin
        reg_177 <= grp_fu_130_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state62))) begin
        reg_183 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tmp_31_i_reg_318 <= grp_fu_130_p1;
        tmp_36_i_reg_324 <= tmp_36_i_fu_133_p1;
        tmp_43_reg_313[6 : 1] <= tmp_43_fu_238_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (1'd0 == exitcond_fu_244_p2))) begin
        tmp_44_reg_342 <= tmp_44_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_295 <= grp_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        x_reg_352 <= grp_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state103))) begin
        y_0_in_reg_68 <= grp_fu_136_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state31) & (exitcond1_fu_193_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) & (exitcond1_fu_193_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_118_p0 = reg_170;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_118_p0 = x_assign_reg_89;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_118_p0 = tmp_26_i_fu_266_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_118_p0 = tmp_34_i_fu_209_p1;
    end else begin
        grp_fu_118_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_118_p1 = x_assign_reg_89;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_118_p1 = 32'd1120403456;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_118_p1 = x_assign_phi_fu_93_p4;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_118_p1 = reg_163;
    end else begin
        grp_fu_118_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_126_p0 = reg_156;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_126_p0 = y_0_in_reg_68;
    end else begin
        grp_fu_126_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state62))) begin
        grp_fu_130_p0 = reg_170;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_130_p0 = reg_163;
    end else begin
        grp_fu_130_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_136_p0 = tmp_31_i_reg_318;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_136_p0 = reg_156;
    end else begin
        grp_fu_136_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_136_p1 = 64'd4607182418800017408;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_136_p1 = 64'd13840687554816376832;
    end else begin
        grp_fu_136_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_142_p0 = reg_177;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state87))) begin
        grp_fu_142_p0 = reg_156;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_142_p0 = tmp_reg_295;
    end else begin
        grp_fu_142_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state79))) begin
        grp_fu_142_p1 = tmp_31_i_reg_318;
    end else if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state87))) begin
        grp_fu_142_p1 = reg_183;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_142_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_142_p1 = 64'd4621819117588971520;
    end else begin
        grp_fu_142_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_151_p1 = tmp_36_i_reg_324;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_151_p1 = reg_177;
    end else begin
        grp_fu_151_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        matrix_ce0 = 1'b1;
    end else begin
        matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        matrix_we0 = 1'b1;
    end else begin
        matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (exitcond1_fu_193_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (exitcond_fu_244_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign exitcond1_fu_193_p2 = ((i_reg_77 == 3'd7) ? 1'b1 : 1'b0);

assign exitcond_fu_244_p2 = ((j_reg_101 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_148_p0 = rank;

assign i_8_fu_280_p2 = (i_reg_77 + 3'd1);

assign j_8_fu_250_p2 = (j_reg_101 + 4'd1);

assign matrix_address0 = tmp_51_cast_fu_286_p1;

assign matrix_d0 = reg_163;

assign p_shl1_cast_fu_234_p1 = tmp_42_fu_226_p3;

assign p_shl_cast_fu_222_p1 = tmp_41_fu_214_p3;

assign tmp_26_i_fu_266_p1 = tmp_28_neg_i_fu_260_p2;

assign tmp_28_cast_fu_271_p1 = j_reg_101;

assign tmp_28_neg_i_fu_260_p2 = (tmp_28_to_int_i_fu_256_p1 ^ 32'd2147483648);

assign tmp_28_to_int_i_fu_256_p1 = x_assign_reg_89;

assign tmp_34_i_fu_209_p1 = tmp_36_neg_i_fu_203_p2;

assign tmp_36_neg_i_fu_203_p2 = (tmp_36_to_int_i_fu_199_p1 ^ 32'd2147483648);

assign tmp_36_to_int_i_fu_199_p1 = reg_163;

assign tmp_41_fu_214_p3 = {{i_reg_77}, {3'd0}};

assign tmp_42_fu_226_p3 = {{i_reg_77}, {1'd0}};

assign tmp_43_fu_238_p2 = (p_shl1_cast_fu_234_p1 + p_shl_cast_fu_222_p1);

assign tmp_44_fu_275_p2 = (tmp_43_reg_313 + tmp_28_cast_fu_271_p1);

assign tmp_51_cast_fu_286_p1 = tmp_44_reg_342;

assign x_assign_phi_fu_93_p4 = x_assign_reg_89;

always @ (posedge ap_clk) begin
    tmp_43_reg_313[0] <= 1'b0;
end

endmodule //init_matrix
